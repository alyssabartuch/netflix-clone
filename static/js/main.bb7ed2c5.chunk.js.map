{"version":3,"sources":["Nav.js","axios.js","requests.js","Banner.js","Row.js","App.js","serviceWorker.js","index.js"],"names":["Nav","useState","show","handleShow","useEffect","window","addEventListener","scrollY","removeEventListener","className","src","alt","instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","movie","setMovie","a","get","request","movies","data","results","Math","floor","random","length","fetchData","style","backgroundSize","backgroundImage","base_img_url","backdrop_path","backgroundPosition","title","name","original_name","truncateStr","overview","Row","fetchURL","isLargeRow","settMovies","map","key","id","poster_path","str","limit","slice","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bb7ed2c5.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./Nav.css\";\n\nfunction Nav() {\n  const [show, handleShow] = useState(false);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        handleShow(true);\n      } else handleShow(false);\n    });\n    return () => {\n      window.removeEventListener(\"scroll\");\n    };\n  }, []);\n\n  return (\n    <div className={`nav ${show && \"nav__black\"}`}>\n      <img\n        className=\"nav__logo\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1200px-Netflix_2015_logo.svg.png\"\n        alt=\"Netflix Logo\"\n      />\n      <img\n        className=\"nav__avatar\"\n        src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRmX1IYrleu5pZkTWvD6cBrp4E0knysir8f-A&usqp=CAU\"\n        alt=\"Avatar Logo\"\n      />\n    </div>\n  );\n}\n\nexport default Nav;\n","import axios from \"axios\";\n\n// base url to make requests to the movie database\nconst instance = axios.create({\n  baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;\n","const API_KEY = \"1c76fc1f888b473ffbc87e630784a7b8\";\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport requests from \"./requests\";\nimport { base_img_url, truncateStr } from \"./App\";\nimport \"./Banner.css\";\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      const movies = [...request.data.results];\n      setMovie(movies[Math.floor(Math.random() * movies.length - 1)]);\n      return request;\n    }\n    fetchData();\n  }, []);\n\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\"${base_img_url}${movie?.backdrop_path}\")`,\n        backgroundPosition: \"center center\",\n      }}\n    >\n      <div className=\"banner__contents\">\n        <h1 className=\"banner__title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n        <div className=\"banner__buttons\">\n          <button className=\"banner__button\">Play</button>\n          <button className=\"banner__button\">My List</button>\n        </div>\n        <h1 className=\"banner__description\">\n          {truncateStr(movie?.overview, 150)}\n        </h1>\n      </div>\n      <div className=\"banner--fadeBottom\" />\n    </header>\n  );\n}\n\nexport default Banner;\n","import React, { useState, useEffect } from \"react\";\nimport { base_img_url } from \"./App\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\n\nexport const base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchURL, isLargeRow }) {\n  const [movies, settMovies] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchURL);\n      settMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchURL]);\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row__posters\">\n        {movies.map((movie) => (\n          <img\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n            key={movie.id}\n            src={`${base_img_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Row;\n","import React from \"react\";\nimport Nav from \"./Nav\";\nimport Banner from \"./Banner\";\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport \"./App.css\";\n\nexport const base_img_url = \"https://image.tmdb.org/t/p/original/\";\n\nexport const truncateStr = (str, limit) => {\n  return str?.length > limit ? str.slice(0, limit) + \"...\" : str;\n};\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner />\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchURL={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"Trending Now\" fetchURL={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchURL={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchURL={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchURL={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchURL={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchURL={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchURL={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}